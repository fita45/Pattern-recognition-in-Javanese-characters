package adaline_pa;

/**
 *
 * @author user
 */
public class Adaline_Pa {

    /**
     * @param args the command line arguments
     */
    public int[][] x;
    private float[][] w;
    private float[][] deltaW;
    private int[] t;
    private int[] y_out;
    private float[] y_in;
    private float[] bias;
    private float deltaWMax[];
    private int epoch;
    private float alfa;
    private float threshold;
    private String akurasi = "";

    public Adaline_Pa() {
        System.out.println("Metode Adaline");
        inisialisasi();
        training();
        
    }

    public void inisialisasi() {
        alfa = 0.025f;
        threshold = 0.025f;

        x = new int[10][50];
        t = new int[10];
        deltaWMax = new float[10];
        //Data Training 1
        x[0][0] = -1;
        x[0][1] = 1;
        x[0][2] = 1;
        x[0][3] = -1;
        x[0][4] = -1;
        x[0][5] = -1;
        x[0][6] = -1;
        x[0][7] = 1;
        x[0][8] = 1;
        x[0][9] = -1;
        x[0][10] = 1;
        x[0][11] = -1;
        x[0][12] = -1;
        x[0][13] = 1;
        x[0][14] = -1;
        x[0][15] = -1;
        x[0][16] = 1;
        x[0][17] = -1;
        x[0][18] = -1;
        x[0][19] = 1;
        x[0][20] = 1;
        x[0][21] = -1;
        x[0][22] = -1;
        x[0][23] = 1;
        x[0][24] = -1;
        x[0][25] = -1;
        x[0][26] = 1;
        x[0][27] = -1;
        x[0][28] = -1;
        x[0][29] = 1;
        x[0][30] = 1;
        x[0][31] = -1;
        x[0][32] = -1;
        x[0][33] = 1;
        x[0][34] = -1;
        x[0][35] = -1;
        x[0][36] = 1;
        x[0][37] = -1;
        x[0][38] = -1;
        x[0][39] = 1;
        x[0][40] = 1;
        x[0][41] = -1;
        x[0][42] = -1;
        x[0][43] = 1;
        x[0][44] = 1;
        x[0][45] = 1;
        x[0][46] = 1;
        x[0][47] = -1;
        x[0][48] = -1;
        x[0][49] = 1;

        //Data Training 2
        x[1][0] = -1;
        x[1][1] = 1;
        x[1][2] = -1;
        x[1][3] = -1;
        x[1][4] = -1;
        x[1][5] = -1;
        x[1][6] = 1;
        x[1][7] = 1;
        x[1][8] = 1;
        x[1][9] = -1;
        x[1][10] = 1;
        x[1][11] = -1;
        x[1][12] = 1;
        x[1][13] = -1;
        x[1][14] = -1;
        x[1][15] = 1;
        x[1][16] = -1;
        x[1][17] = -1;
        x[1][18] = -1;
        x[1][19] = 1;
        x[1][20] = 1;
        x[1][21] = -1;
        x[1][22] = 1;
        x[1][23] = -1;
        x[1][24] = -1;
        x[1][25] = 1;
        x[1][26] = -1;
        x[1][27] = -1;
        x[1][28] = -1;
        x[1][29] = 1;
        x[1][30] = 1;
        x[1][31] = -1;
        x[1][32] = 1;
        x[1][33] = 1;
        x[1][34] = 1;
        x[1][35] = 1;
        x[1][36] = -1;
        x[1][37] = -1;
        x[1][38] = -1;
        x[1][39] = 1;
        x[1][40] = 1;
        x[1][41] = -1;
        x[1][42] = 1;
        x[1][43] = 1;
        x[1][44] = 1;
        x[1][45] = 1;
        x[1][46] = -1;
        x[1][47] = -1;
        x[1][48] = -1;
        x[1][49] = 1;

        //Data Training 3
        x[2][0] = -1;
        x[2][1] = 1;
        x[2][2] = -1;
        x[2][3] = -1;
        x[2][4] = -1;
        x[2][5] = -1;
        x[2][6] = 1;
        x[2][7] = 1;
        x[2][8] = 1;
        x[2][9] = -1;
        x[2][10] = 1;
        x[2][11] = 1;
        x[2][12] = -1;
        x[2][13] = -1;
        x[2][14] = 1;
        x[2][15] = 1;
        x[2][16] = 1;
        x[2][17] = 1;
        x[2][18] = 1;
        x[2][19] = 1;
        x[2][20] = 1;
        x[2][21] = -1;
        x[2][22] = 1;
        x[2][23] = -1;
        x[2][24] = -1;
        x[2][25] = 1;
        x[2][26] = -1;
        x[2][27] = -1;
        x[2][28] = -1;
        x[2][29] = 1;
        x[2][30] = 1;
        x[2][31] = -1;
        x[2][32] = 1;
        x[2][33] = -1;
        x[2][34] = -1;
        x[2][35] = 1;
        x[2][36] = -1;
        x[2][37] = -1;
        x[2][38] = -1;
        x[2][39] = 1;
        x[2][40] = 1;
        x[2][41] = -1;
        x[2][42] = 1;
        x[2][43] = 1;
        x[2][44] = 1;
        x[2][45] = 1;
        x[2][46] = -1;
        x[2][47] = -1;
        x[2][48] = -1;
        x[2][49] = 1;

        //Data Training 4
        x[3][0] = 1;
        x[3][1] = 1;
        x[3][2] = 1;
        x[3][3] = 1;
        x[3][4] = -1;
        x[3][5] = -1;
        x[3][6] = 1;
        x[3][7] = 1;
        x[3][8] = 1;
        x[3][9] = 1;
        x[3][10] = 1;
        x[3][11] = -1;
        x[3][12] = -1;
        x[3][13] = 1;
        x[3][14] = -1;
        x[3][15] = -1;
        x[3][16] = 1;
        x[3][17] = -1;
        x[3][18] = -1;
        x[3][19] = 1;
        x[3][20] = 1;
        x[3][21] = -1;
        x[3][22] = -1;
        x[3][23] = 1;
        x[3][24] = -1;
        x[3][25] = -1;
        x[3][26] = 1;
        x[3][27] = -1;
        x[3][28] = -1;
        x[3][29] = 1;
        x[3][30] = 1;
        x[3][31] = -1;
        x[3][32] = -1;
        x[3][33] = 1;
        x[3][34] = -1;
        x[3][35] = -1;
        x[3][36] = 1;
        x[3][37] = -1;
        x[3][38] = -1;
        x[3][39] = 1;
        x[3][40] = 1;
        x[3][41] = -1;
        x[3][42] = -1;
        x[3][43] = 1;
        x[3][44] = 1;
        x[3][45] = 1;
        x[3][46] = 1;
        x[3][47] = -1;
        x[3][48] = -1;
        x[3][49] = 1;

        //Data Training 5
        x[4][0] = -1;
        x[4][1] = 1;
        x[4][2] = 1;
        x[4][3] = -1;
        x[4][4] = -1;
        x[4][5] = -1;
        x[4][6] = 1;
        x[4][7] = 1;
        x[4][8] = 1;
        x[4][9] = -1;
        x[4][10] = 1;
        x[4][11] = -1;
        x[4][12] = -1;
        x[4][13] = 1;
        x[4][14] = -1;
        x[4][15] = 1;
        x[4][16] = -1;
        x[4][17] = -1;
        x[4][18] = -1;
        x[4][19] = 1;
        x[4][20] = 1;
        x[4][21] = -1;
        x[4][22] = -1;
        x[4][23] = 1;
        x[4][24] = -1;
        x[4][25] = 1;
        x[4][26] = -1;
        x[4][27] = -1;
        x[4][28] = -1;
        x[4][29] = 1;
        x[4][30] = 1;
        x[4][31] = -1;
        x[4][32] = -1;
        x[4][33] = 1;
        x[4][34] = -1;
        x[4][35] = 1;
        x[4][36] = -1;
        x[4][37] = -1;
        x[4][38] = -1;
        x[4][39] = 1;
        x[4][40] = 1;
        x[4][41] = -1;
        x[4][42] = -1;
        x[4][43] = 1;
        x[4][44] = 1;
        x[4][45] = -1;
        x[4][46] = -1;
        x[4][47] = -1;
        x[4][48] = -1;
        x[4][49] = 1;

        //Data Training 6
        x[5][0] = -1;
        x[5][1] = 1;
        x[5][2] = 1;
        x[5][3] = 1;
        x[5][4] = 1;
        x[5][5] = 1;
        x[5][6] = 1;
        x[5][7] = -1;
        x[5][8] = -1;
        x[5][9] = -1;
        x[5][10] = -1;
        x[5][11] = 1;
        x[5][12] = -1;
        x[5][13] = 1;
        x[5][14] = -1;
        x[5][15] = -1;
        x[5][16] = 1;
        x[5][17] = -1;
        x[5][18] = -1;
        x[5][19] = -1;
        x[5][20] = -1;
        x[5][21] = -1;
        x[5][22] = -1;
        x[5][23] = 1;
        x[5][24] = -1;
        x[5][25] = -1;
        x[5][26] = 1;
        x[5][27] = -1;
        x[5][28] = -1;
        x[5][29] = -1;
        x[5][30] = -1;
        x[5][31] = -1;
        x[5][32] = -1;
        x[5][33] = 1;
        x[5][34] = -1;
        x[5][35] = -1;
        x[5][36] = 1;
        x[5][37] = -1;
        x[5][38] = -1;
        x[5][39] = -1;
        x[5][40] = -1;
        x[5][41] = -1;
        x[5][42] = -1;
        x[5][43] = 1;
        x[5][44] = -1;
        x[5][45] = -1;
        x[5][46] = 1;
        x[5][47] = -1;
        x[5][48] = -1;
        x[5][49] = -1;

        //Data Training 7
        x[6][0] = -1;
        x[6][1] = 1;
        x[6][2] = -1;
        x[6][3] = -1;
        x[6][4] = -1;
        x[6][5] = 1;
        x[6][6] = 1;
        x[6][7] = 1;
        x[6][8] = 1;
        x[6][9] = -1;
        x[6][10] = 1;
        x[6][11] = -1;
        x[6][12] = 1;
        x[6][13] = -1;
        x[6][14] = 1;
        x[6][15] = 1;
        x[6][16] = -1;
        x[6][17] = -1;
        x[6][18] = -1;
        x[6][19] = 1;
        x[6][20] = 1;
        x[6][21] = -1;
        x[6][22] = 1;
        x[6][23] = -1;
        x[6][24] = 1;
        x[6][25] = 1;
        x[6][26] = -1;
        x[6][27] = -1;
        x[6][28] = -1;
        x[6][29] = 1;
        x[6][30] = 1;
        x[6][31] = -1;
        x[6][32] = 1;
        x[6][33] = -1;
        x[6][34] = 1;
        x[6][35] = 1;
        x[6][36] = -1;
        x[6][37] = -1;
        x[6][38] = -1;
        x[6][39] = 1;
        x[6][40] = 1;
        x[6][41] = -1;
        x[6][42] = 1;
        x[6][43] = 1;
        x[6][44] = 1;
        x[6][45] = 1;
        x[6][46] = -1;
        x[6][47] = -1;
        x[6][48] = -1;
        x[6][49] = 1;

        //Data Training 8
        x[7][0] = -1;
        x[7][1] = 1;
        x[7][2] = 1;
        x[7][3] = -1;
        x[7][4] = -1;
        x[7][5] = -1;
        x[7][6] = 1;
        x[7][7] = 1;
        x[7][8] = 1;
        x[7][9] = -1;
        x[7][10] = 1;
        x[7][11] = 1;
        x[7][12] = -1;
        x[7][13] = 1;
        x[7][14] = -1;
        x[7][15] = 1;
        x[7][16] = 1;
        x[7][17] = -1;
        x[7][18] = -1;
        x[7][19] = 1;
        x[7][20] = 1;
        x[7][21] = 1;
        x[7][22] = -1;
        x[7][23] = 1;
        x[7][24] = -1;
        x[7][25] = 1;
        x[7][26] = 1;
        x[7][27] = -1;
        x[7][28] = -1;
        x[7][29] = 1;
        x[7][30] = 1;
        x[7][31] = 1;
        x[7][32] = -1;
        x[7][33] = 1;
        x[7][34] = -1;
        x[7][35] = 1;
        x[7][36] = 1;
        x[7][37] = -1;
        x[7][38] = -1;
        x[7][39] = 1;
        x[7][40] = 1;
        x[7][41] = 1;
        x[7][42] = -1;
        x[7][43] = 1;
        x[7][44] = 1;
        x[7][45] = 1;
        x[7][46] = 1;
        x[7][47] = -1;
        x[7][48] = -1;
        x[7][49] = 1;

        //Data Training 9
        x[8][0] = 1;
        x[8][1] = 1;
        x[8][2] = 1;
        x[8][3] = 1;
        x[8][4] = 1;
        x[8][5] = 1;
        x[8][6] = 1;
        x[8][7] = 1;
        x[8][8] = 1;
        x[8][9] = 1;
        x[8][10] = 1;
        x[8][11] = -1;
        x[8][12] = 1;
        x[8][13] = -1;
        x[8][14] = -1;
        x[8][15] = 1;
        x[8][16] = 1;
        x[8][17] = -1;
        x[8][18] = -1;
        x[8][19] = 1;
        x[8][20] = -1;
        x[8][21] = -1;
        x[8][22] = 1;
        x[8][23] = -1;
        x[8][24] = -1;
        x[8][25] = 1;
        x[8][26] = 1;
        x[8][27] = -1;
        x[8][28] = -1;
        x[8][29] = 1;
        x[8][30] = -1;
        x[8][31] = -1;
        x[8][32] = 1;
        x[8][33] = -1;
        x[8][34] = -1;
        x[8][35] = 1;
        x[8][36] = 1;
        x[8][37] = -1;
        x[8][38] = -1;
        x[8][39] = 1;
        x[8][40] = -1;
        x[8][41] = -1;
        x[8][42] = 1;
        x[8][43] = -1;
        x[8][44] = -1;
        x[8][45] = 1;
        x[8][46] = 1;
        x[8][47] = -1;
        x[8][48] = -1;
        x[8][49] = 1;

        //Data Training 10
        x[9][0] = 1;
        x[9][1] = 1;
        x[9][2] = 1;
        x[9][3] = 1;
        x[9][4] = 1;
        x[9][5] = -1;
        x[9][6] = 1;
        x[9][7] = 1;
        x[9][8] = 1;
        x[9][9] = 1;
        x[9][10] = 1;
        x[9][11] = -1;
        x[9][12] = 1;
        x[9][13] = -1;
        x[9][14] = 1;
        x[9][15] = -1;
        x[9][16] = 1;
        x[9][17] = -1;
        x[9][18] = -1;
        x[9][19] = 1;
        x[9][20] = 1;
        x[9][21] = -1;
        x[9][22] = 1;
        x[9][23] = -1;
        x[9][24] = 1;
        x[9][25] = -1;
        x[9][26] = 1;
        x[9][27] = -1;
        x[9][28] = -1;
        x[9][29] = 1;
        x[9][30] = 1;
        x[9][31] = -1;
        x[9][32] = 1;
        x[9][33] = -1;
        x[9][34] = 1;
        x[9][35] = -1;
        x[9][36] = 1;
        x[9][37] = -1;
        x[9][38] = -1;
        x[9][39] = 1;
        x[9][40] = 1;
        x[9][41] = -1;
        x[9][42] = 1;
        x[9][43] = -1;
        x[9][44] = 1;
        x[9][45] = 1;
        x[9][46] = 1;
        x[9][47] = -1;
        x[9][48] = -1;
        x[9][49] = 1;

        t[0] = 1;
        t[1] = 1;
        t[2] = 1;
        t[3] = 1;
        t[4] = 1;
        t[5] = -1;
        t[6] = 1;
        t[7] = 1;
        t[8] = -1;
        t[9] = -1;


        w = new float[10][50];
        deltaW = new float[10][50];

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 50; j++) {
                w[i][j] = 0;
                deltaW[i][j] = 0;
            }
        }

        bias = new float[10];
        y_in = new float[10];
        y_out = new int[10];
        
        for (int k = 0; k < 10; k++) {
            y_out[k] = 0;
            bias[k] = 0;
        }

        deltaWMax[0] = 0;
        epoch = 0;
    }

    private int f(float y_in) {
        if (y_in < 0) {
            return -1;
        } else {
            return 1;
        }
    }
int i = 0;
    public void training() {
        do {
            i++;
            epoch++;            
            System.out.println("\nEpoch ke-" + epoch);

                for (int a = 0; a < 10; a++) {
                    deltaWMax[a] = 0;
                    for (int b = 0; b < 50; b++) {
                        if(a==0 && epoch == 1){
                            y_in[a] = 0;
                            bias[a] = 0;
                        }
                        else if(a==0 && epoch != 1){
                            y_in[a] += x[a][b] * w[9][b];
                        }
                        else{
                            y_in[a] += x[a][b] * w[a-1][b];
                        }
                    }
                    y_in[a] = y_in[a] + bias[a];
                    //System.out.println("y_in " + (i) + " = " + y_in [a]);
                    for (int b = 0; b < 50; b++) {
                    deltaW[a][b] = alfa * (t[a] - y_in[a]) * x[a][b];
                        if(a==0 && epoch == 1){
                            w[a][b] = deltaW[a][b];
                        }
                        else if(a==0 && epoch != 1){
                            w[a][b] = w[9][b] + deltaW[a][b];
                        }
                        else{
                            w[a][b] = w[a-1][b] + deltaW[a][b];
                        }
                    }
                    for (int b = 0; b < 50; b++) {
                        if (deltaWMax[a] > deltaW[a][b]) {
                            deltaWMax = deltaWMax;
                        } else {
                            deltaWMax[a] = deltaW[a][b];
                        }  
                    }
                    if(a==0 && epoch == 1){
                        bias[a] = alfa * (t[a] - y_in[a]);
                    }
                    else if(a==0 && epoch != 1){
                        bias[a] = bias[9] + alfa * (t[a] - y_in[a]);
                    }
                    else{
                        bias[a] = bias[a-1] + alfa * (t[a] - y_in[a]);
                    }
                    System.out.println("Max Delta W data ke - " + (a) + " = " + deltaWMax[a]);
                    if(deltaWMax[a]<threshold){
                        stop += 1;
                        System.out.println("Stop");
                    }
                    else{
                        System.out.println("Continue");
                    }
                }
                
        } while (stop < 10);
    }

    int data_benar;
    int stop = 0;
    public void testing() {
        for (int a = 5; a < 10; a++) {
            for (int b = 0; b < 50; b++) {
                y_in[a] += x[a][b] * w[9][b];
            }
            y_in[a] = y_in[a] + bias[9];
            y_out[a] = f(y_in[a]);
            System.out.print(y_out[a] + ",");
            
            if (y_out[a] == 1) {
                System.out.println("Data ini termasuk aksara PA");
            } else {
                System.out.println("Data ini tidak termasuk aksara PA");
            }
            
            if(y_out[a] == t[a]){
                data_benar += 1;
            }
        }
        akurasi = (data_benar*20) + "%";
        System.out.println("\nAkurasi = " + akurasi);


    }
    public static void main(String[] args) {
        Adaline_Pa adaline = new Adaline_Pa();
        System.out.println("\nHasil Data Testing");
        adaline.testing();
        
        
    }
}
